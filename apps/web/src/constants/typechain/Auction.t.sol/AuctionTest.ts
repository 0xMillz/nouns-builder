/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AuctionTestInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "testRevert_AlreadyInitialized()": FunctionFragment;
    "testRevert_AuctionExpired()": FunctionFragment;
    "testRevert_AuctionFailedTokenMintOnCreate()": FunctionFragment;
    "testRevert_CannotBidZeroWithZeroBid()": FunctionFragment;
    "testRevert_CannotOnlySettleWhenNotPaused()": FunctionFragment;
    "testRevert_CannotSettleWhenAuctionStillActive()": FunctionFragment;
    "testRevert_InvalidBidTokenId()": FunctionFragment;
    "testRevert_MustBePausedToUpdateDuration()": FunctionFragment;
    "testRevert_MustBePausedToUpdateMinBidIncrement()": FunctionFragment;
    "testRevert_MustBePausedToUpdateReservePrice()": FunctionFragment;
    "testRevert_MustBePausedToUpdateTimeBuffer()": FunctionFragment;
    "testRevert_MustMeetMinBidIncrement()": FunctionFragment;
    "testRevert_MustMeetReservePrice()": FunctionFragment;
    "testRevert_MustUpgradeWhenPaused()": FunctionFragment;
    "testRevert_OnlyFounderCanUnpause()": FunctionFragment;
    "testRevert_TokenBurnFromNoBids()": FunctionFragment;
    "test_AuctionHouseInitialized()": FunctionFragment;
    "test_CreateBid(uint256)": FunctionFragment;
    "test_CreateMultipleBidsAfterZero(uint256)": FunctionFragment;
    "test_CreateSubsequentBid()": FunctionFragment;
    "test_ExtendAuction()": FunctionFragment;
    "test_FirstAuctionPauseAndUnpauseInFirstAuction()": FunctionFragment;
    "test_NoTwoZeroValueBids()": FunctionFragment;
    "test_OnlySettleWhenPaused()": FunctionFragment;
    "test_PausesWhenMintFails()": FunctionFragment;
    "test_SettleAuction()": FunctionFragment;
    "test_Unpause()": FunctionFragment;
    "test_UpdateDuration()": FunctionFragment;
    "test_UpdateMinBidIncrement()": FunctionFragment;
    "test_UpdateReservePrice()": FunctionFragment;
    "test_UpdateTimeBuffer()": FunctionFragment;
    "test_UpgradeWhenPaused()": FunctionFragment;
    "test_ZeroBidIncrementNotAllowed()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "failed"
      | "setUp"
      | "testRevert_AlreadyInitialized"
      | "testRevert_AuctionExpired"
      | "testRevert_AuctionFailedTokenMintOnCreate"
      | "testRevert_CannotBidZeroWithZeroBid"
      | "testRevert_CannotOnlySettleWhenNotPaused"
      | "testRevert_CannotSettleWhenAuctionStillActive"
      | "testRevert_InvalidBidTokenId"
      | "testRevert_MustBePausedToUpdateDuration"
      | "testRevert_MustBePausedToUpdateMinBidIncrement"
      | "testRevert_MustBePausedToUpdateReservePrice"
      | "testRevert_MustBePausedToUpdateTimeBuffer"
      | "testRevert_MustMeetMinBidIncrement"
      | "testRevert_MustMeetReservePrice"
      | "testRevert_MustUpgradeWhenPaused"
      | "testRevert_OnlyFounderCanUnpause"
      | "testRevert_TokenBurnFromNoBids"
      | "test_AuctionHouseInitialized"
      | "test_CreateBid"
      | "test_CreateMultipleBidsAfterZero"
      | "test_CreateSubsequentBid"
      | "test_ExtendAuction"
      | "test_FirstAuctionPauseAndUnpauseInFirstAuction"
      | "test_NoTwoZeroValueBids"
      | "test_OnlySettleWhenPaused"
      | "test_PausesWhenMintFails"
      | "test_SettleAuction"
      | "test_Unpause"
      | "test_UpdateDuration"
      | "test_UpdateMinBidIncrement"
      | "test_UpdateReservePrice"
      | "test_UpdateTimeBuffer"
      | "test_UpgradeWhenPaused"
      | "test_ZeroBidIncrementNotAllowed"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testRevert_AlreadyInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_AuctionExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_AuctionFailedTokenMintOnCreate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotBidZeroWithZeroBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotOnlySettleWhenNotPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotSettleWhenAuctionStillActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_InvalidBidTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_MustBePausedToUpdateDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_MustBePausedToUpdateMinBidIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_MustBePausedToUpdateReservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_MustBePausedToUpdateTimeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_MustMeetMinBidIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_MustMeetReservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_MustUpgradeWhenPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyFounderCanUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_TokenBurnFromNoBids",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_AuctionHouseInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CreateBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_CreateMultipleBidsAfterZero",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_CreateSubsequentBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ExtendAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_FirstAuctionPauseAndUnpauseInFirstAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_NoTwoZeroValueBids",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_OnlySettleWhenPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_PausesWhenMintFails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_SettleAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_Unpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateMinBidIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateReservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateTimeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpgradeWhenPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ZeroBidIncrementNotAllowed",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_AlreadyInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_AuctionExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_AuctionFailedTokenMintOnCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotBidZeroWithZeroBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotOnlySettleWhenNotPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotSettleWhenAuctionStillActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_InvalidBidTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_MustBePausedToUpdateDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_MustBePausedToUpdateMinBidIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_MustBePausedToUpdateReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_MustBePausedToUpdateTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_MustMeetMinBidIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_MustMeetReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_MustUpgradeWhenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyFounderCanUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_TokenBurnFromNoBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_AuctionHouseInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CreateBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CreateMultipleBidsAfterZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CreateSubsequentBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ExtendAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_FirstAuctionPauseAndUnpauseInFirstAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_NoTwoZeroValueBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_OnlySettleWhenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_PausesWhenMintFails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_SettleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_Unpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateMinBidIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpgradeWhenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ZeroBidIncrementNotAllowed",
    data: BytesLike
  ): Result;

  events: {
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface AuctionTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_AlreadyInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_AuctionExpired(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_AuctionFailedTokenMintOnCreate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotBidZeroWithZeroBid(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotOnlySettleWhenNotPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotSettleWhenAuctionStillActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_InvalidBidTokenId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_MustBePausedToUpdateDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_MustBePausedToUpdateMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_MustBePausedToUpdateReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_MustBePausedToUpdateTimeBuffer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_MustMeetMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_MustMeetReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_MustUpgradeWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyFounderCanUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_TokenBurnFromNoBids(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_AuctionHouseInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CreateBid(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CreateMultipleBidsAfterZero(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CreateSubsequentBid(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ExtendAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_FirstAuctionPauseAndUnpauseInFirstAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_NoTwoZeroValueBids(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_OnlySettleWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_PausesWhenMintFails(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_SettleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_Unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateTimeBuffer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpgradeWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ZeroBidIncrementNotAllowed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_AlreadyInitialized(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_AuctionExpired(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_AuctionFailedTokenMintOnCreate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotBidZeroWithZeroBid(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotOnlySettleWhenNotPaused(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotSettleWhenAuctionStillActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_InvalidBidTokenId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_MustBePausedToUpdateDuration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_MustBePausedToUpdateMinBidIncrement(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_MustBePausedToUpdateReservePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_MustBePausedToUpdateTimeBuffer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_MustMeetMinBidIncrement(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_MustMeetReservePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_MustUpgradeWhenPaused(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyFounderCanUnpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_TokenBurnFromNoBids(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_AuctionHouseInitialized(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CreateBid(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CreateMultipleBidsAfterZero(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CreateSubsequentBid(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ExtendAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_FirstAuctionPauseAndUnpauseInFirstAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_NoTwoZeroValueBids(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_OnlySettleWhenPaused(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_PausesWhenMintFails(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_SettleAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_Unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateDuration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateMinBidIncrement(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateReservePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateTimeBuffer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpgradeWhenPaused(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ZeroBidIncrementNotAllowed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testRevert_AlreadyInitialized(overrides?: CallOverrides): Promise<void>;

    testRevert_AuctionExpired(overrides?: CallOverrides): Promise<void>;

    testRevert_AuctionFailedTokenMintOnCreate(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotBidZeroWithZeroBid(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotOnlySettleWhenNotPaused(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotSettleWhenAuctionStillActive(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_InvalidBidTokenId(overrides?: CallOverrides): Promise<void>;

    testRevert_MustBePausedToUpdateDuration(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_MustBePausedToUpdateMinBidIncrement(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_MustBePausedToUpdateReservePrice(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_MustBePausedToUpdateTimeBuffer(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_MustMeetMinBidIncrement(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_MustMeetReservePrice(overrides?: CallOverrides): Promise<void>;

    testRevert_MustUpgradeWhenPaused(overrides?: CallOverrides): Promise<void>;

    testRevert_OnlyFounderCanUnpause(overrides?: CallOverrides): Promise<void>;

    testRevert_TokenBurnFromNoBids(overrides?: CallOverrides): Promise<void>;

    test_AuctionHouseInitialized(overrides?: CallOverrides): Promise<void>;

    test_CreateBid(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_CreateMultipleBidsAfterZero(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_CreateSubsequentBid(overrides?: CallOverrides): Promise<void>;

    test_ExtendAuction(overrides?: CallOverrides): Promise<void>;

    test_FirstAuctionPauseAndUnpauseInFirstAuction(
      overrides?: CallOverrides
    ): Promise<void>;

    test_NoTwoZeroValueBids(overrides?: CallOverrides): Promise<void>;

    test_OnlySettleWhenPaused(overrides?: CallOverrides): Promise<void>;

    test_PausesWhenMintFails(overrides?: CallOverrides): Promise<void>;

    test_SettleAuction(overrides?: CallOverrides): Promise<void>;

    test_Unpause(overrides?: CallOverrides): Promise<void>;

    test_UpdateDuration(overrides?: CallOverrides): Promise<void>;

    test_UpdateMinBidIncrement(overrides?: CallOverrides): Promise<void>;

    test_UpdateReservePrice(overrides?: CallOverrides): Promise<void>;

    test_UpdateTimeBuffer(overrides?: CallOverrides): Promise<void>;

    test_UpgradeWhenPaused(overrides?: CallOverrides): Promise<void>;

    test_ZeroBidIncrementNotAllowed(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_AlreadyInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_AuctionExpired(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_AuctionFailedTokenMintOnCreate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotBidZeroWithZeroBid(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotOnlySettleWhenNotPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotSettleWhenAuctionStillActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_InvalidBidTokenId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_MustBePausedToUpdateDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_MustBePausedToUpdateMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_MustBePausedToUpdateReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_MustBePausedToUpdateTimeBuffer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_MustMeetMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_MustMeetReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_MustUpgradeWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyFounderCanUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_TokenBurnFromNoBids(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_AuctionHouseInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CreateBid(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CreateMultipleBidsAfterZero(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CreateSubsequentBid(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ExtendAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_FirstAuctionPauseAndUnpauseInFirstAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_NoTwoZeroValueBids(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_OnlySettleWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_PausesWhenMintFails(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_SettleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_Unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateTimeBuffer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpgradeWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ZeroBidIncrementNotAllowed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_AlreadyInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_AuctionExpired(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_AuctionFailedTokenMintOnCreate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotBidZeroWithZeroBid(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotOnlySettleWhenNotPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotSettleWhenAuctionStillActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_InvalidBidTokenId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_MustBePausedToUpdateDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_MustBePausedToUpdateMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_MustBePausedToUpdateReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_MustBePausedToUpdateTimeBuffer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_MustMeetMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_MustMeetReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_MustUpgradeWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyFounderCanUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_TokenBurnFromNoBids(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_AuctionHouseInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CreateBid(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CreateMultipleBidsAfterZero(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CreateSubsequentBid(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ExtendAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_FirstAuctionPauseAndUnpauseInFirstAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_NoTwoZeroValueBids(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_OnlySettleWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_PausesWhenMintFails(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_SettleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_Unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateMinBidIncrement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateReservePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateTimeBuffer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpgradeWhenPaused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ZeroBidIncrementNotAllowed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
