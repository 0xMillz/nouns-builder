/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  MockPartialTokenImpl,
  MockPartialTokenImplInterface,
} from "../MockPartialTokenImpl";

const _abi = [
  {
    inputs: [],
    name: "DELEGATE_CALL_FAILED",
    type: "error",
  },
  {
    inputs: [],
    name: "INVALID_TARGET",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "INVALID_UPGRADE",
    type: "error",
  },
  {
    inputs: [],
    name: "ONLY_CALL",
    type: "error",
  },
  {
    inputs: [],
    name: "ONLY_DELEGATECALL",
    type: "error",
  },
  {
    inputs: [],
    name: "ONLY_PROXY",
    type: "error",
  },
  {
    inputs: [],
    name: "ONLY_UUPS",
    type: "error",
  },
  {
    inputs: [],
    name: "UNSUPPORTED_UUID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "onFirstAuctionStarted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newImpl",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newImpl",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5060805161094961004b6000396000818160c30152818161011d015281816102120152818161026c015261035601526109496000f3fe60806040526004361061003f5760003560e01c80633659cfe6146100445780634f1ef2861461006657806352d1902d146100795780639d8aefc2146100a0575b600080fd5b34801561005057600080fd5b5061006461005f36600461079a565b6100ac565b005b6100646100743660046107eb565b6101fb565b34801561008557600080fd5b5061008e61033c565b60405190815260200160405180910390f35b34801561006457600080fd5b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361011b576040517f43d22ee900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166101907f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146101dd576040517fe74d90a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101f8816040518060200160405280600081525060006103d2565b50565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361026a576040517f43d22ee900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166102df7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161461032c576040517fe74d90a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610338828260016103d2565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146103ad576040517f575bc92e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561040a576104058361052a565b505050565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561048f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261048c918101906108cb565b60015b6104c5576040517fc0bb20b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461051e576040517f0849b49600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506104058383836105e4565b803b61057e576040517fc40d973400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240160405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6105ed8361060f565b6000825111806105fa5750805b15610405576106098383610664565b50505050565b6106188161052a565b60405173ffffffffffffffffffffffffffffffffffffffff821681527fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9060200160405180910390a150565b6060823b61069e576040517f37f2022900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516106c691906108e4565b600060405180830381855af49150503d8060008114610701576040519150601f19603f3d011682016040523d82523d6000602084013e610706565b606091505b50915091506107158282610720565b925050505b92915050565b6060821561072f57508061071a565b81511561073f5781518083602001fd5b6040517f62536b1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461079557600080fd5b919050565b6000602082840312156107ac57600080fd5b6107b582610771565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156107fe57600080fd5b61080783610771565b9150602083013567ffffffffffffffff8082111561082457600080fd5b818501915085601f83011261083857600080fd5b81358181111561084a5761084a6107bc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610890576108906107bc565b816040528281528860208487010111156108a957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156108dd57600080fd5b5051919050565b6000825160005b8181101561090557602081860181015185830152016108eb565b50600092019182525091905056fea2646970667358221220771bb526d33de307e7b0eab512f3e75e87ffbf901ec0f1d11302b12c78a2cb0464736f6c63430008100033";

type MockPartialTokenImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPartialTokenImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPartialTokenImpl__factory extends ContractFactory {
  constructor(...args: MockPartialTokenImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPartialTokenImpl> {
    return super.deploy(overrides || {}) as Promise<MockPartialTokenImpl>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPartialTokenImpl {
    return super.attach(address) as MockPartialTokenImpl;
  }
  override connect(signer: Signer): MockPartialTokenImpl__factory {
    return super.connect(signer) as MockPartialTokenImpl__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPartialTokenImplInterface {
    return new utils.Interface(_abi) as MockPartialTokenImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPartialTokenImpl {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockPartialTokenImpl;
  }
}
