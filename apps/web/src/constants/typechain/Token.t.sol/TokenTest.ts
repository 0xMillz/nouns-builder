/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TokenTestInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "mintedTokens(address)": FunctionFragment;
    "setUp()": FunctionFragment;
    "testFoundersCannotHaveFullOwnership()": FunctionFragment;
    "testFoundersCreateZeroOwnershipOmitted()": FunctionFragment;
    "testRevert_OnlyDAOCanUpgrade()": FunctionFragment;
    "testRevert_OnlyDAOCanUpgradeToAndCall()": FunctionFragment;
    "testRevert_OnlyMinterCanMint(address,address)": FunctionFragment;
    "testRevert_OnlyMinterCanMintBatch(address,address,address,uint256)": FunctionFragment;
    "testRevert_OnlyMinterCanMintToRecipient(address,address,address)": FunctionFragment;
    "testRevert_OnlyOwnerUpdateFounders()": FunctionFragment;
    "testRevert_OnlyOwnerUpdateMinters()": FunctionFragment;
    "test_AuctionCanMintAfterDeploy()": FunctionFragment;
    "test_FounderScheduleRounding()": FunctionFragment;
    "test_FounderScheduleRounding2()": FunctionFragment;
    "test_FounderShareAllocationFuzz(uint256,uint256,uint256)": FunctionFragment;
    "test_MaxOwnership2Founders()": FunctionFragment;
    "test_MaxOwnership50Founders()": FunctionFragment;
    "test_MaxOwnership99Founders()": FunctionFragment;
    "test_MintBatch(uint8,address)": FunctionFragment;
    "test_MinterCanBurnTheirOwnToken(address)": FunctionFragment;
    "test_MinterCanMintBatch()": FunctionFragment;
    "test_MockAuctionUnpause()": FunctionFragment;
    "test_MockFounders()": FunctionFragment;
    "test_MockTokenInit()": FunctionFragment;
    "test_OverwriteCheckpointWithSameTimestamp()": FunctionFragment;
    "test_TokenIdCollisionAvoidance(uint8)": FunctionFragment;
    "test_UpdateFounderShareAllocationFuzz(uint256,uint256,uint256)": FunctionFragment;
    "test_UpdateFoundersZeroOwnership()": FunctionFragment;
    "test_UpdateMintersOwnerCanAddMinters(address,address)": FunctionFragment;
    "test_UpdateMintersOwnerCanRemoveMinters(address,address)": FunctionFragment;
    "test_isMinterReturnsMinterStatus(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "failed"
      | "mintedTokens"
      | "setUp"
      | "testFoundersCannotHaveFullOwnership"
      | "testFoundersCreateZeroOwnershipOmitted"
      | "testRevert_OnlyDAOCanUpgrade"
      | "testRevert_OnlyDAOCanUpgradeToAndCall"
      | "testRevert_OnlyMinterCanMint"
      | "testRevert_OnlyMinterCanMintBatch"
      | "testRevert_OnlyMinterCanMintToRecipient"
      | "testRevert_OnlyOwnerUpdateFounders"
      | "testRevert_OnlyOwnerUpdateMinters"
      | "test_AuctionCanMintAfterDeploy"
      | "test_FounderScheduleRounding"
      | "test_FounderScheduleRounding2"
      | "test_FounderShareAllocationFuzz"
      | "test_MaxOwnership2Founders"
      | "test_MaxOwnership50Founders"
      | "test_MaxOwnership99Founders"
      | "test_MintBatch"
      | "test_MinterCanBurnTheirOwnToken"
      | "test_MinterCanMintBatch"
      | "test_MockAuctionUnpause"
      | "test_MockFounders"
      | "test_MockTokenInit"
      | "test_OverwriteCheckpointWithSameTimestamp"
      | "test_TokenIdCollisionAvoidance"
      | "test_UpdateFounderShareAllocationFuzz"
      | "test_UpdateFoundersZeroOwnership"
      | "test_UpdateMintersOwnerCanAddMinters"
      | "test_UpdateMintersOwnerCanRemoveMinters"
      | "test_isMinterReturnsMinterStatus"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testFoundersCannotHaveFullOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFoundersCreateZeroOwnershipOmitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyDAOCanUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyDAOCanUpgradeToAndCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyMinterCanMint",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyMinterCanMintBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyMinterCanMintToRecipient",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyOwnerUpdateFounders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_OnlyOwnerUpdateMinters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_AuctionCanMintAfterDeploy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_FounderScheduleRounding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_FounderScheduleRounding2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_FounderShareAllocationFuzz",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "test_MaxOwnership2Founders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_MaxOwnership50Founders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_MaxOwnership99Founders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_MintBatch",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_MinterCanBurnTheirOwnToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_MinterCanMintBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_MockAuctionUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_MockFounders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_MockTokenInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_OverwriteCheckpointWithSameTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_TokenIdCollisionAvoidance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateFounderShareAllocationFuzz",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateFoundersZeroOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateMintersOwnerCanAddMinters",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateMintersOwnerCanRemoveMinters",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_isMinterReturnsMinterStatus",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testFoundersCannotHaveFullOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFoundersCreateZeroOwnershipOmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyDAOCanUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyDAOCanUpgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyMinterCanMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyMinterCanMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyMinterCanMintToRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyOwnerUpdateFounders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_OnlyOwnerUpdateMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_AuctionCanMintAfterDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_FounderScheduleRounding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_FounderScheduleRounding2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_FounderShareAllocationFuzz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MaxOwnership2Founders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MaxOwnership50Founders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MaxOwnership99Founders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MinterCanBurnTheirOwnToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MinterCanMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MockAuctionUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MockFounders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MockTokenInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_OverwriteCheckpointWithSameTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_TokenIdCollisionAvoidance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateFounderShareAllocationFuzz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateFoundersZeroOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateMintersOwnerCanAddMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateMintersOwnerCanRemoveMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isMinterReturnsMinterStatus",
    data: BytesLike
  ): Result;

  events: {
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface TokenTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFoundersCannotHaveFullOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFoundersCreateZeroOwnershipOmitted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyDAOCanUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyDAOCanUpgradeToAndCall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyMinterCanMint(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyMinterCanMintBatch(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyMinterCanMintToRecipient(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyOwnerUpdateFounders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_OnlyOwnerUpdateMinters(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_AuctionCanMintAfterDeploy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_FounderScheduleRounding(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_FounderScheduleRounding2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_FounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MaxOwnership2Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MaxOwnership50Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MaxOwnership99Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MintBatch(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MinterCanBurnTheirOwnToken(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MinterCanMintBatch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MockAuctionUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MockFounders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_MockTokenInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_OverwriteCheckpointWithSameTimestamp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_TokenIdCollisionAvoidance(
      mintCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateFounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateFoundersZeroOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateMintersOwnerCanAddMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateMintersOwnerCanRemoveMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_isMinterReturnsMinterStatus(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFoundersCannotHaveFullOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFoundersCreateZeroOwnershipOmitted(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyDAOCanUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyDAOCanUpgradeToAndCall(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyMinterCanMint(
    newMinter: PromiseOrValue<string>,
    nonMinter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyMinterCanMintBatch(
    newMinter: PromiseOrValue<string>,
    nonMinter: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyMinterCanMintToRecipient(
    newMinter: PromiseOrValue<string>,
    nonMinter: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyOwnerUpdateFounders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_OnlyOwnerUpdateMinters(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_AuctionCanMintAfterDeploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_FounderScheduleRounding(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_FounderScheduleRounding2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_FounderShareAllocationFuzz(
    f1Percentage: PromiseOrValue<BigNumberish>,
    f2Percentage: PromiseOrValue<BigNumberish>,
    f3Percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MaxOwnership2Founders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MaxOwnership50Founders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MaxOwnership99Founders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MintBatch(
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MinterCanBurnTheirOwnToken(
    newMinter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MinterCanMintBatch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MockAuctionUnpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MockFounders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_MockTokenInit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_OverwriteCheckpointWithSameTimestamp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_TokenIdCollisionAvoidance(
    mintCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateFounderShareAllocationFuzz(
    f1Percentage: PromiseOrValue<BigNumberish>,
    f2Percentage: PromiseOrValue<BigNumberish>,
    f3Percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateFoundersZeroOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateMintersOwnerCanAddMinters(
    m1: PromiseOrValue<string>,
    m2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateMintersOwnerCanRemoveMinters(
    m1: PromiseOrValue<string>,
    m2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_isMinterReturnsMinterStatus(
    _minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    mintedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testFoundersCannotHaveFullOwnership(
      overrides?: CallOverrides
    ): Promise<void>;

    testFoundersCreateZeroOwnershipOmitted(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_OnlyDAOCanUpgrade(overrides?: CallOverrides): Promise<void>;

    testRevert_OnlyDAOCanUpgradeToAndCall(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_OnlyMinterCanMint(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_OnlyMinterCanMintBatch(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_OnlyMinterCanMintToRecipient(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_OnlyOwnerUpdateFounders(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_OnlyOwnerUpdateMinters(overrides?: CallOverrides): Promise<void>;

    test_AuctionCanMintAfterDeploy(overrides?: CallOverrides): Promise<void>;

    test_FounderScheduleRounding(overrides?: CallOverrides): Promise<void>;

    test_FounderScheduleRounding2(overrides?: CallOverrides): Promise<void>;

    test_FounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_MaxOwnership2Founders(overrides?: CallOverrides): Promise<void>;

    test_MaxOwnership50Founders(overrides?: CallOverrides): Promise<void>;

    test_MaxOwnership99Founders(overrides?: CallOverrides): Promise<void>;

    test_MintBatch(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_MinterCanBurnTheirOwnToken(
      newMinter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_MinterCanMintBatch(overrides?: CallOverrides): Promise<void>;

    test_MockAuctionUnpause(overrides?: CallOverrides): Promise<void>;

    test_MockFounders(overrides?: CallOverrides): Promise<void>;

    test_MockTokenInit(overrides?: CallOverrides): Promise<void>;

    test_OverwriteCheckpointWithSameTimestamp(
      overrides?: CallOverrides
    ): Promise<void>;

    test_TokenIdCollisionAvoidance(
      mintCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_UpdateFounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_UpdateFoundersZeroOwnership(overrides?: CallOverrides): Promise<void>;

    test_UpdateMintersOwnerCanAddMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_UpdateMintersOwnerCanRemoveMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_isMinterReturnsMinterStatus(
      _minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFoundersCannotHaveFullOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFoundersCreateZeroOwnershipOmitted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyDAOCanUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyDAOCanUpgradeToAndCall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyMinterCanMint(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyMinterCanMintBatch(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyMinterCanMintToRecipient(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyOwnerUpdateFounders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_OnlyOwnerUpdateMinters(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_AuctionCanMintAfterDeploy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_FounderScheduleRounding(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_FounderScheduleRounding2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_FounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MaxOwnership2Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MaxOwnership50Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MaxOwnership99Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MintBatch(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MinterCanBurnTheirOwnToken(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MinterCanMintBatch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MockAuctionUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MockFounders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_MockTokenInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_OverwriteCheckpointWithSameTimestamp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_TokenIdCollisionAvoidance(
      mintCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateFounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateFoundersZeroOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateMintersOwnerCanAddMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateMintersOwnerCanRemoveMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_isMinterReturnsMinterStatus(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFoundersCannotHaveFullOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFoundersCreateZeroOwnershipOmitted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyDAOCanUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyDAOCanUpgradeToAndCall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyMinterCanMint(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyMinterCanMintBatch(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyMinterCanMintToRecipient(
      newMinter: PromiseOrValue<string>,
      nonMinter: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyOwnerUpdateFounders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_OnlyOwnerUpdateMinters(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_AuctionCanMintAfterDeploy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_FounderScheduleRounding(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_FounderScheduleRounding2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_FounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MaxOwnership2Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MaxOwnership50Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MaxOwnership99Founders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MintBatch(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MinterCanBurnTheirOwnToken(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MinterCanMintBatch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MockAuctionUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MockFounders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_MockTokenInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_OverwriteCheckpointWithSameTimestamp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_TokenIdCollisionAvoidance(
      mintCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateFounderShareAllocationFuzz(
      f1Percentage: PromiseOrValue<BigNumberish>,
      f2Percentage: PromiseOrValue<BigNumberish>,
      f3Percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateFoundersZeroOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateMintersOwnerCanAddMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateMintersOwnerCanRemoveMinters(
      m1: PromiseOrValue<string>,
      m2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_isMinterReturnsMinterStatus(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
