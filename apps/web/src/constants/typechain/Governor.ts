/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace GovernorTypesV1 {
  export type ProposalStruct = {
    proposer: PromiseOrValue<string>;
    timeCreated: PromiseOrValue<BigNumberish>;
    againstVotes: PromiseOrValue<BigNumberish>;
    forVotes: PromiseOrValue<BigNumberish>;
    abstainVotes: PromiseOrValue<BigNumberish>;
    voteStart: PromiseOrValue<BigNumberish>;
    voteEnd: PromiseOrValue<BigNumberish>;
    proposalThreshold: PromiseOrValue<BigNumberish>;
    quorumVotes: PromiseOrValue<BigNumberish>;
    executed: PromiseOrValue<boolean>;
    canceled: PromiseOrValue<boolean>;
    vetoed: PromiseOrValue<boolean>;
  };

  export type ProposalStructOutput = [
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    boolean
  ] & {
    proposer: string;
    timeCreated: number;
    againstVotes: number;
    forVotes: number;
    abstainVotes: number;
    voteStart: number;
    voteEnd: number;
    proposalThreshold: number;
    quorumVotes: number;
    executed: boolean;
    canceled: boolean;
    vetoed: boolean;
  };
}

export interface GovernorInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_PROPOSAL_THRESHOLD_BPS()": FunctionFragment;
    "MAX_QUORUM_THRESHOLD_BPS()": FunctionFragment;
    "MAX_VOTING_DELAY()": FunctionFragment;
    "MAX_VOTING_PERIOD()": FunctionFragment;
    "MIN_PROPOSAL_THRESHOLD_BPS()": FunctionFragment;
    "MIN_QUORUM_THRESHOLD_BPS()": FunctionFragment;
    "MIN_VOTING_DELAY()": FunctionFragment;
    "MIN_VOTING_PERIOD()": FunctionFragment;
    "VOTE_TYPEHASH()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "burnVetoer()": FunctionFragment;
    "cancel(bytes32)": FunctionFragment;
    "cancelOwnershipTransfer()": FunctionFragment;
    "castVote(bytes32,uint256)": FunctionFragment;
    "castVoteBySig(address,bytes32,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "castVoteWithReason(bytes32,uint256,string)": FunctionFragment;
    "contractVersion()": FunctionFragment;
    "execute(address[],uint256[],bytes[],bytes32,address)": FunctionFragment;
    "getProposal(bytes32)": FunctionFragment;
    "getVotes(address,uint256)": FunctionFragment;
    "hashProposal(address[],uint256[],bytes[],bytes32,address)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "proposalDeadline(bytes32)": FunctionFragment;
    "proposalEta(bytes32)": FunctionFragment;
    "proposalSnapshot(bytes32)": FunctionFragment;
    "proposalThreshold()": FunctionFragment;
    "proposalThresholdBps()": FunctionFragment;
    "proposalVotes(bytes32)": FunctionFragment;
    "propose(address[],uint256[],bytes[],string)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "queue(bytes32)": FunctionFragment;
    "quorum()": FunctionFragment;
    "quorumThresholdBps()": FunctionFragment;
    "safeTransferOwnership(address)": FunctionFragment;
    "state(bytes32)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateProposalThresholdBps(uint256)": FunctionFragment;
    "updateQuorumThresholdBps(uint256)": FunctionFragment;
    "updateVetoer(address)": FunctionFragment;
    "updateVotingDelay(uint256)": FunctionFragment;
    "updateVotingPeriod(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "veto(bytes32)": FunctionFragment;
    "vetoer()": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "MAX_PROPOSAL_THRESHOLD_BPS"
      | "MAX_QUORUM_THRESHOLD_BPS"
      | "MAX_VOTING_DELAY"
      | "MAX_VOTING_PERIOD"
      | "MIN_PROPOSAL_THRESHOLD_BPS"
      | "MIN_QUORUM_THRESHOLD_BPS"
      | "MIN_VOTING_DELAY"
      | "MIN_VOTING_PERIOD"
      | "VOTE_TYPEHASH"
      | "acceptOwnership"
      | "burnVetoer"
      | "cancel"
      | "cancelOwnershipTransfer"
      | "castVote"
      | "castVoteBySig"
      | "castVoteWithReason"
      | "contractVersion"
      | "execute"
      | "getProposal"
      | "getVotes"
      | "hashProposal"
      | "initialize"
      | "nonce"
      | "owner"
      | "pendingOwner"
      | "proposalDeadline"
      | "proposalEta"
      | "proposalSnapshot"
      | "proposalThreshold"
      | "proposalThresholdBps"
      | "proposalVotes"
      | "propose"
      | "proxiableUUID"
      | "queue"
      | "quorum"
      | "quorumThresholdBps"
      | "safeTransferOwnership"
      | "state"
      | "token"
      | "transferOwnership"
      | "treasury"
      | "updateProposalThresholdBps"
      | "updateQuorumThresholdBps"
      | "updateVetoer"
      | "updateVotingDelay"
      | "updateVotingPeriod"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "veto"
      | "vetoer"
      | "votingDelay"
      | "votingPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROPOSAL_THRESHOLD_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_QUORUM_THRESHOLD_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTING_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROPOSAL_THRESHOLD_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_QUORUM_THRESHOLD_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnVetoer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalEta",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThresholdBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumThresholdBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "state",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProposalThresholdBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuorumThresholdBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVetoer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "veto",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "vetoer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROPOSAL_THRESHOLD_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_QUORUM_THRESHOLD_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VOTING_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROPOSAL_THRESHOLD_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_QUORUM_THRESHOLD_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnVetoer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalEta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThresholdBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumThresholdBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProposalThresholdBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuorumThresholdBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVetoer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vetoer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint256)": EventFragment;
    "OwnerCanceled(address,address)": EventFragment;
    "OwnerPending(address,address)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "ProposalCanceled(bytes32)": EventFragment;
    "ProposalCreated(bytes32,address[],uint256[],bytes[],string,bytes32,tuple)": EventFragment;
    "ProposalExecuted(bytes32)": EventFragment;
    "ProposalQueued(bytes32,uint256)": EventFragment;
    "ProposalThresholdBpsUpdated(uint256,uint256)": EventFragment;
    "ProposalVetoed(bytes32)": EventFragment;
    "QuorumVotesBpsUpdated(uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VetoerUpdated(address,address)": EventFragment;
    "VoteCast(address,bytes32,uint256,uint256,string)": EventFragment;
    "VotingDelayUpdated(uint256,uint256)": EventFragment;
    "VotingPeriodUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerPending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalThresholdBpsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVetoed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumVotesBpsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VetoerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingDelayUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodUpdated"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnerCanceledEventObject {
  owner: string;
  canceledOwner: string;
}
export type OwnerCanceledEvent = TypedEvent<
  [string, string],
  OwnerCanceledEventObject
>;

export type OwnerCanceledEventFilter = TypedEventFilter<OwnerCanceledEvent>;

export interface OwnerPendingEventObject {
  owner: string;
  pendingOwner: string;
}
export type OwnerPendingEvent = TypedEvent<
  [string, string],
  OwnerPendingEventObject
>;

export type OwnerPendingEventFilter = TypedEventFilter<OwnerPendingEvent>;

export interface OwnerUpdatedEventObject {
  prevOwner: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface ProposalCanceledEventObject {
  proposalId: string;
}
export type ProposalCanceledEvent = TypedEvent<
  [string],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  proposalId: string;
  targets: string[];
  values: BigNumber[];
  calldatas: string[];
  description: string;
  descriptionHash: string;
  proposal: GovernorTypesV1.ProposalStructOutput;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    string,
    string[],
    BigNumber[],
    string[],
    string,
    string,
    GovernorTypesV1.ProposalStructOutput
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: string;
}
export type ProposalExecutedEvent = TypedEvent<
  [string],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalQueuedEventObject {
  proposalId: string;
  eta: BigNumber;
}
export type ProposalQueuedEvent = TypedEvent<
  [string, BigNumber],
  ProposalQueuedEventObject
>;

export type ProposalQueuedEventFilter = TypedEventFilter<ProposalQueuedEvent>;

export interface ProposalThresholdBpsUpdatedEventObject {
  prevBps: BigNumber;
  newBps: BigNumber;
}
export type ProposalThresholdBpsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalThresholdBpsUpdatedEventObject
>;

export type ProposalThresholdBpsUpdatedEventFilter =
  TypedEventFilter<ProposalThresholdBpsUpdatedEvent>;

export interface ProposalVetoedEventObject {
  proposalId: string;
}
export type ProposalVetoedEvent = TypedEvent<
  [string],
  ProposalVetoedEventObject
>;

export type ProposalVetoedEventFilter = TypedEventFilter<ProposalVetoedEvent>;

export interface QuorumVotesBpsUpdatedEventObject {
  prevBps: BigNumber;
  newBps: BigNumber;
}
export type QuorumVotesBpsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  QuorumVotesBpsUpdatedEventObject
>;

export type QuorumVotesBpsUpdatedEventFilter =
  TypedEventFilter<QuorumVotesBpsUpdatedEvent>;

export interface UpgradedEventObject {
  impl: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VetoerUpdatedEventObject {
  prevVetoer: string;
  newVetoer: string;
}
export type VetoerUpdatedEvent = TypedEvent<
  [string, string],
  VetoerUpdatedEventObject
>;

export type VetoerUpdatedEventFilter = TypedEventFilter<VetoerUpdatedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: string;
  support: BigNumber;
  weight: BigNumber;
  reason: string;
}
export type VoteCastEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VotingDelayUpdatedEventObject {
  prevVotingDelay: BigNumber;
  newVotingDelay: BigNumber;
}
export type VotingDelayUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  VotingDelayUpdatedEventObject
>;

export type VotingDelayUpdatedEventFilter =
  TypedEventFilter<VotingDelayUpdatedEvent>;

export interface VotingPeriodUpdatedEventObject {
  prevVotingPeriod: BigNumber;
  newVotingPeriod: BigNumber;
}
export type VotingPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  VotingPeriodUpdatedEventObject
>;

export type VotingPeriodUpdatedEventFilter =
  TypedEventFilter<VotingPeriodUpdatedEvent>;

export interface Governor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_VOTING_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_VOTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_VOTING_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_VOTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnVetoer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVote(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVoteBySig(
      _voter: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<[string]>;

    execute(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GovernorTypesV1.ProposalStructOutput]>;

    getVotes(
      _account: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashProposal(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vetoer: PromiseOrValue<string>,
      _votingDelay: PromiseOrValue<BigNumberish>,
      _votingPeriod: PromiseOrValue<BigNumberish>,
      _proposalThresholdBps: PromiseOrValue<BigNumberish>,
      _quorumThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonce(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    proposalDeadline(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalEta(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalSnapshot(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalThresholdBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalVotes(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    queue(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    quorumThresholdBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeTransferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    state(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateProposalThresholdBps(
      _newProposalThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateQuorumThresholdBps(
      _newQuorumVotesBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVetoer(
      _newVetoer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVotingDelay(
      _newVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      _newImpl: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    veto(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vetoer(overrides?: CallOverrides): Promise<[string]>;

    votingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_VOTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_VOTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnVetoer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOwnershipTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVote(
    _proposalId: PromiseOrValue<BytesLike>,
    _support: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVoteBySig(
    _voter: PromiseOrValue<string>,
    _proposalId: PromiseOrValue<BytesLike>,
    _support: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVoteWithReason(
    _proposalId: PromiseOrValue<BytesLike>,
    _support: PromiseOrValue<BigNumberish>,
    _reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractVersion(overrides?: CallOverrides): Promise<string>;

  execute(
    _targets: PromiseOrValue<string>[],
    _values: PromiseOrValue<BigNumberish>[],
    _calldatas: PromiseOrValue<BytesLike>[],
    _descriptionHash: PromiseOrValue<BytesLike>,
    _proposer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernorTypesV1.ProposalStructOutput>;

  getVotes(
    _account: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashProposal(
    _targets: PromiseOrValue<string>[],
    _values: PromiseOrValue<BigNumberish>[],
    _calldatas: PromiseOrValue<BytesLike>[],
    _descriptionHash: PromiseOrValue<BytesLike>,
    _proposer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _treasury: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _vetoer: PromiseOrValue<string>,
    _votingDelay: PromiseOrValue<BigNumberish>,
    _votingPeriod: PromiseOrValue<BigNumberish>,
    _proposalThresholdBps: PromiseOrValue<BigNumberish>,
    _quorumThresholdBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonce(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  proposalDeadline(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalEta(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalSnapshot(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  proposalThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

  proposalVotes(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  propose(
    _targets: PromiseOrValue<string>[],
    _values: PromiseOrValue<BigNumberish>[],
    _calldatas: PromiseOrValue<BytesLike>[],
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  queue(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quorum(overrides?: CallOverrides): Promise<BigNumber>;

  quorumThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

  safeTransferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  state(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateProposalThresholdBps(
    _newProposalThresholdBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateQuorumThresholdBps(
    _newQuorumVotesBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVetoer(
    _newVetoer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVotingDelay(
    _newVotingDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVotingPeriod(
    _newVotingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    _newImpl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    _newImpl: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  veto(
    _proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vetoer(overrides?: CallOverrides): Promise<string>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VOTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    burnVetoer(overrides?: CallOverrides): Promise<void>;

    cancel(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOwnershipTransfer(overrides?: CallOverrides): Promise<void>;

    castVote(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVoteBySig(
      _voter: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<string>;

    execute(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposal(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernorTypesV1.ProposalStructOutput>;

    getVotes(
      _account: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vetoer: PromiseOrValue<string>,
      _votingDelay: PromiseOrValue<BigNumberish>,
      _votingPeriod: PromiseOrValue<BigNumberish>,
      _proposalThresholdBps: PromiseOrValue<BigNumberish>,
      _quorumThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nonce(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    proposalDeadline(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalEta(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalSnapshot(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

    proposalVotes(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    queue(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    quorumThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

    safeTransferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    state(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateProposalThresholdBps(
      _newProposalThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateQuorumThresholdBps(
      _newQuorumVotesBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVetoer(
      _newVetoer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVotingDelay(
      _newVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      _newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      _newImpl: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    veto(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    vetoer(overrides?: CallOverrides): Promise<string>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint256)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnerCanceled(address,address)"(
      owner?: PromiseOrValue<string> | null,
      canceledOwner?: PromiseOrValue<string> | null
    ): OwnerCanceledEventFilter;
    OwnerCanceled(
      owner?: PromiseOrValue<string> | null,
      canceledOwner?: PromiseOrValue<string> | null
    ): OwnerCanceledEventFilter;

    "OwnerPending(address,address)"(
      owner?: PromiseOrValue<string> | null,
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnerPendingEventFilter;
    OwnerPending(
      owner?: PromiseOrValue<string> | null,
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnerPendingEventFilter;

    "OwnerUpdated(address,address)"(
      prevOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      prevOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "ProposalCanceled(bytes32)"(proposalId?: null): ProposalCanceledEventFilter;
    ProposalCanceled(proposalId?: null): ProposalCanceledEventFilter;

    "ProposalCreated(bytes32,address[],uint256[],bytes[],string,bytes32,tuple)"(
      proposalId?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      description?: null,
      descriptionHash?: null,
      proposal?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      description?: null,
      descriptionHash?: null,
      proposal?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(bytes32)"(proposalId?: null): ProposalExecutedEventFilter;
    ProposalExecuted(proposalId?: null): ProposalExecutedEventFilter;

    "ProposalQueued(bytes32,uint256)"(
      proposalId?: null,
      eta?: null
    ): ProposalQueuedEventFilter;
    ProposalQueued(proposalId?: null, eta?: null): ProposalQueuedEventFilter;

    "ProposalThresholdBpsUpdated(uint256,uint256)"(
      prevBps?: null,
      newBps?: null
    ): ProposalThresholdBpsUpdatedEventFilter;
    ProposalThresholdBpsUpdated(
      prevBps?: null,
      newBps?: null
    ): ProposalThresholdBpsUpdatedEventFilter;

    "ProposalVetoed(bytes32)"(proposalId?: null): ProposalVetoedEventFilter;
    ProposalVetoed(proposalId?: null): ProposalVetoedEventFilter;

    "QuorumVotesBpsUpdated(uint256,uint256)"(
      prevBps?: null,
      newBps?: null
    ): QuorumVotesBpsUpdatedEventFilter;
    QuorumVotesBpsUpdated(
      prevBps?: null,
      newBps?: null
    ): QuorumVotesBpsUpdatedEventFilter;

    "Upgraded(address)"(impl?: null): UpgradedEventFilter;
    Upgraded(impl?: null): UpgradedEventFilter;

    "VetoerUpdated(address,address)"(
      prevVetoer?: null,
      newVetoer?: null
    ): VetoerUpdatedEventFilter;
    VetoerUpdated(
      prevVetoer?: null,
      newVetoer?: null
    ): VetoerUpdatedEventFilter;

    "VoteCast(address,bytes32,uint256,uint256,string)"(
      voter?: null,
      proposalId?: null,
      support?: null,
      weight?: null,
      reason?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: null,
      proposalId?: null,
      support?: null,
      weight?: null,
      reason?: null
    ): VoteCastEventFilter;

    "VotingDelayUpdated(uint256,uint256)"(
      prevVotingDelay?: null,
      newVotingDelay?: null
    ): VotingDelayUpdatedEventFilter;
    VotingDelayUpdated(
      prevVotingDelay?: null,
      newVotingDelay?: null
    ): VotingDelayUpdatedEventFilter;

    "VotingPeriodUpdated(uint256,uint256)"(
      prevVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodUpdatedEventFilter;
    VotingPeriodUpdated(
      prevVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodUpdatedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VOTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PROPOSAL_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_QUORUM_THRESHOLD_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnVetoer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVote(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVoteBySig(
      _voter: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(
      _account: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vetoer: PromiseOrValue<string>,
      _votingDelay: PromiseOrValue<BigNumberish>,
      _votingPeriod: PromiseOrValue<BigNumberish>,
      _proposalThresholdBps: PromiseOrValue<BigNumberish>,
      _quorumThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonce(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeadline(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalEta(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalSnapshot(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

    proposalVotes(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    quorumThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

    safeTransferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    state(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateProposalThresholdBps(
      _newProposalThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateQuorumThresholdBps(
      _newQuorumVotesBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVetoer(
      _newVetoer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVotingDelay(
      _newVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      _newImpl: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    veto(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vetoer(overrides?: CallOverrides): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PROPOSAL_THRESHOLD_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_QUORUM_THRESHOLD_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_VOTING_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_VOTING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_PROPOSAL_THRESHOLD_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_QUORUM_THRESHOLD_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_VOTING_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_VOTING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnVetoer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      _voter: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BytesLike>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      _account: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashProposal(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _descriptionHash: PromiseOrValue<BytesLike>,
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vetoer: PromiseOrValue<string>,
      _votingDelay: PromiseOrValue<BigNumberish>,
      _votingPeriod: PromiseOrValue<BigNumberish>,
      _proposalThresholdBps: PromiseOrValue<BigNumberish>,
      _quorumThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonce(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalDeadline(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalEta(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalSnapshot(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalThresholdBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalVotes(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumThresholdBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeTransferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    state(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateProposalThresholdBps(
      _newProposalThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateQuorumThresholdBps(
      _newQuorumVotesBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVetoer(
      _newVetoer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingDelay(
      _newVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      _newImpl: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    veto(
      _proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vetoer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
