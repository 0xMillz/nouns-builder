/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GovTestInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "testFail_GovernorCannotReceive1155BatchTransfer(uint256[],uint256[])": FunctionFragment;
    "testFail_GovernorCannotReceive1155SingleTransfer(uint256,uint256)": FunctionFragment;
    "testFail_GovernorCannotReceive721SafeTransfer()": FunctionFragment;
    "testFail_MismatchingHashesFromIncorrectProposer()": FunctionFragment;
    "testRevert_BelowProposalThreshold(uint32)": FunctionFragment;
    "testRevert_CallerNotVetoer()": FunctionFragment;
    "testRevert_CannotCancelAlreadyExecuted()": FunctionFragment;
    "testRevert_CannotCancelIfExactThreshold()": FunctionFragment;
    "testRevert_CannotQueueDraw()": FunctionFragment;
    "testRevert_CannotQueueFailed()": FunctionFragment;
    "testRevert_CannotQueueFailedQuorum()": FunctionFragment;
    "testRevert_CannotQueueMissingProposal()": FunctionFragment;
    "testRevert_CannotQueueVotingStillActive()": FunctionFragment;
    "testRevert_CannotReinitializeGovernor()": FunctionFragment;
    "testRevert_CannotReinitializeTreasury()": FunctionFragment;
    "testRevert_CannotVetoExecuted()": FunctionFragment;
    "testRevert_CannotVoteTwice()": FunctionFragment;
    "testRevert_InvalidVoteExpired()": FunctionFragment;
    "testRevert_InvalidVoteNonce()": FunctionFragment;
    "testRevert_InvalidVoteSigner()": FunctionFragment;
    "testRevert_InvalidVoteType()": FunctionFragment;
    "testRevert_NoCalldata()": FunctionFragment;
    "testRevert_NoTarget()": FunctionFragment;
    "testRevert_NoValue()": FunctionFragment;
    "testRevert_ProposalExists()": FunctionFragment;
    "testRevert_ProposerAboveThreshold()": FunctionFragment;
    "testRevert_VotingNotStarted()": FunctionFragment;
    "test_CancelProposal()": FunctionFragment;
    "test_CancelProposalAndTreasuryQueue()": FunctionFragment;
    "test_CancelProposerFellBelowThreshold()": FunctionFragment;
    "test_CastVote()": FunctionFragment;
    "test_CastVoteWithSig()": FunctionFragment;
    "test_CastVoteWithoutWeight()": FunctionFragment;
    "test_CreateProposal()": FunctionFragment;
    "test_DelegateAndTransferVotes()": FunctionFragment;
    "test_GovernorInit()": FunctionFragment;
    "test_GracePeriod(uint128)": FunctionFragment;
    "test_ProposalHashUniqueToSender()": FunctionFragment;
    "test_ProposalVoteQueueExecution()": FunctionFragment;
    "test_QueueProposal()": FunctionFragment;
    "test_TreasuryInit()": FunctionFragment;
    "test_TreasuryReceive721SafeTransfer(uint256)": FunctionFragment;
    "test_TreasuryReceiveERC1155BatchTransfer()": FunctionFragment;
    "test_TreasuryReceiveERC1155SingleTransfer(uint256,uint256)": FunctionFragment;
    "test_UpdateDelay(uint128)": FunctionFragment;
    "test_VerifySubmittedProposalHash()": FunctionFragment;
    "test_VetoProposal()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "failed"
      | "setUp"
      | "testFail_GovernorCannotReceive1155BatchTransfer"
      | "testFail_GovernorCannotReceive1155SingleTransfer"
      | "testFail_GovernorCannotReceive721SafeTransfer"
      | "testFail_MismatchingHashesFromIncorrectProposer"
      | "testRevert_BelowProposalThreshold"
      | "testRevert_CallerNotVetoer"
      | "testRevert_CannotCancelAlreadyExecuted"
      | "testRevert_CannotCancelIfExactThreshold"
      | "testRevert_CannotQueueDraw"
      | "testRevert_CannotQueueFailed"
      | "testRevert_CannotQueueFailedQuorum"
      | "testRevert_CannotQueueMissingProposal"
      | "testRevert_CannotQueueVotingStillActive"
      | "testRevert_CannotReinitializeGovernor"
      | "testRevert_CannotReinitializeTreasury"
      | "testRevert_CannotVetoExecuted"
      | "testRevert_CannotVoteTwice"
      | "testRevert_InvalidVoteExpired"
      | "testRevert_InvalidVoteNonce"
      | "testRevert_InvalidVoteSigner"
      | "testRevert_InvalidVoteType"
      | "testRevert_NoCalldata"
      | "testRevert_NoTarget"
      | "testRevert_NoValue"
      | "testRevert_ProposalExists"
      | "testRevert_ProposerAboveThreshold"
      | "testRevert_VotingNotStarted"
      | "test_CancelProposal"
      | "test_CancelProposalAndTreasuryQueue"
      | "test_CancelProposerFellBelowThreshold"
      | "test_CastVote"
      | "test_CastVoteWithSig"
      | "test_CastVoteWithoutWeight"
      | "test_CreateProposal"
      | "test_DelegateAndTransferVotes"
      | "test_GovernorInit"
      | "test_GracePeriod"
      | "test_ProposalHashUniqueToSender"
      | "test_ProposalVoteQueueExecution"
      | "test_QueueProposal"
      | "test_TreasuryInit"
      | "test_TreasuryReceive721SafeTransfer"
      | "test_TreasuryReceiveERC1155BatchTransfer"
      | "test_TreasuryReceiveERC1155SingleTransfer"
      | "test_UpdateDelay"
      | "test_VerifySubmittedProposalHash"
      | "test_VetoProposal"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testFail_GovernorCannotReceive1155BatchTransfer",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testFail_GovernorCannotReceive1155SingleTransfer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testFail_GovernorCannotReceive721SafeTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFail_MismatchingHashesFromIncorrectProposer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_BelowProposalThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CallerNotVetoer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotCancelAlreadyExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotCancelIfExactThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotQueueDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotQueueFailed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotQueueFailedQuorum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotQueueMissingProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotQueueVotingStillActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotReinitializeGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotReinitializeTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotVetoExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_CannotVoteTwice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_InvalidVoteExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_InvalidVoteNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_InvalidVoteSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_InvalidVoteType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_NoCalldata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_NoTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_NoValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_ProposalExists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_ProposerAboveThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert_VotingNotStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CancelProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CancelProposalAndTreasuryQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CancelProposerFellBelowThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CastVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CastVoteWithSig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CastVoteWithoutWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_CreateProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_DelegateAndTransferVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_GovernorInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_GracePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ProposalHashUniqueToSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ProposalVoteQueueExecution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_QueueProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_TreasuryInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_TreasuryReceive721SafeTransfer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_TreasuryReceiveERC1155BatchTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_TreasuryReceiveERC1155SingleTransfer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpdateDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_VerifySubmittedProposalHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_VetoProposal",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testFail_GovernorCannotReceive1155BatchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFail_GovernorCannotReceive1155SingleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFail_GovernorCannotReceive721SafeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFail_MismatchingHashesFromIncorrectProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_BelowProposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CallerNotVetoer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotCancelAlreadyExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotCancelIfExactThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotQueueDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotQueueFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotQueueFailedQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotQueueMissingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotQueueVotingStillActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotReinitializeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotReinitializeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotVetoExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_CannotVoteTwice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_InvalidVoteExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_InvalidVoteNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_InvalidVoteSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_InvalidVoteType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_NoCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_NoTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_NoValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_ProposalExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_ProposerAboveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevert_VotingNotStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CancelProposalAndTreasuryQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CancelProposerFellBelowThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CastVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CastVoteWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CastVoteWithoutWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_CreateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_DelegateAndTransferVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_GovernorInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_GracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ProposalHashUniqueToSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ProposalVoteQueueExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_QueueProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_TreasuryInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_TreasuryReceive721SafeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_TreasuryReceiveERC1155BatchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_TreasuryReceiveERC1155SingleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_VerifySubmittedProposalHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_VetoProposal",
    data: BytesLike
  ): Result;

  events: {
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface GovTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFail_GovernorCannotReceive1155BatchTransfer(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFail_GovernorCannotReceive1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFail_GovernorCannotReceive721SafeTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFail_MismatchingHashesFromIncorrectProposer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_BelowProposalThreshold(
      bps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CallerNotVetoer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotCancelAlreadyExecuted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotCancelIfExactThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotQueueDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotQueueFailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotQueueFailedQuorum(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotQueueMissingProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotQueueVotingStillActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotReinitializeGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotReinitializeTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotVetoExecuted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_CannotVoteTwice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_InvalidVoteExpired(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_InvalidVoteNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_InvalidVoteSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_InvalidVoteType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_NoCalldata(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_NoTarget(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_NoValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_ProposalExists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_ProposerAboveThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevert_VotingNotStarted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CancelProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CancelProposalAndTreasuryQueue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CancelProposerFellBelowThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CastVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CastVoteWithSig(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CastVoteWithoutWeight(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_CreateProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_DelegateAndTransferVotes(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_GovernorInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_GracePeriod(
      _newGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ProposalHashUniqueToSender(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ProposalVoteQueueExecution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_QueueProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_TreasuryInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_TreasuryReceive721SafeTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_TreasuryReceiveERC1155BatchTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_TreasuryReceiveERC1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_UpdateDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_VerifySubmittedProposalHash(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_VetoProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFail_GovernorCannotReceive1155BatchTransfer(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFail_GovernorCannotReceive1155SingleTransfer(
    _tokenId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFail_GovernorCannotReceive721SafeTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFail_MismatchingHashesFromIncorrectProposer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_BelowProposalThreshold(
    bps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CallerNotVetoer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotCancelAlreadyExecuted(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotCancelIfExactThreshold(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotQueueDraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotQueueFailed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotQueueFailedQuorum(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotQueueMissingProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotQueueVotingStillActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotReinitializeGovernor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotReinitializeTreasury(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotVetoExecuted(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_CannotVoteTwice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_InvalidVoteExpired(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_InvalidVoteNonce(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_InvalidVoteSigner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_InvalidVoteType(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_NoCalldata(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_NoTarget(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_NoValue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_ProposalExists(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_ProposerAboveThreshold(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevert_VotingNotStarted(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CancelProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CancelProposalAndTreasuryQueue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CancelProposerFellBelowThreshold(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CastVote(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CastVoteWithSig(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CastVoteWithoutWeight(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_CreateProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_DelegateAndTransferVotes(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_GovernorInit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_GracePeriod(
    _newGracePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ProposalHashUniqueToSender(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ProposalVoteQueueExecution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_QueueProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_TreasuryInit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_TreasuryReceive721SafeTransfer(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_TreasuryReceiveERC1155BatchTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_TreasuryReceiveERC1155SingleTransfer(
    _tokenId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_UpdateDelay(
    _newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_VerifySubmittedProposalHash(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_VetoProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testFail_GovernorCannotReceive1155BatchTransfer(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    testFail_GovernorCannotReceive1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testFail_GovernorCannotReceive721SafeTransfer(
      overrides?: CallOverrides
    ): Promise<void>;

    testFail_MismatchingHashesFromIncorrectProposer(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_BelowProposalThreshold(
      bps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CallerNotVetoer(overrides?: CallOverrides): Promise<void>;

    testRevert_CannotCancelAlreadyExecuted(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotCancelIfExactThreshold(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotQueueDraw(overrides?: CallOverrides): Promise<void>;

    testRevert_CannotQueueFailed(overrides?: CallOverrides): Promise<void>;

    testRevert_CannotQueueFailedQuorum(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotQueueMissingProposal(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotQueueVotingStillActive(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotReinitializeGovernor(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotReinitializeTreasury(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert_CannotVetoExecuted(overrides?: CallOverrides): Promise<void>;

    testRevert_CannotVoteTwice(overrides?: CallOverrides): Promise<void>;

    testRevert_InvalidVoteExpired(overrides?: CallOverrides): Promise<void>;

    testRevert_InvalidVoteNonce(overrides?: CallOverrides): Promise<void>;

    testRevert_InvalidVoteSigner(overrides?: CallOverrides): Promise<void>;

    testRevert_InvalidVoteType(overrides?: CallOverrides): Promise<void>;

    testRevert_NoCalldata(overrides?: CallOverrides): Promise<void>;

    testRevert_NoTarget(overrides?: CallOverrides): Promise<void>;

    testRevert_NoValue(overrides?: CallOverrides): Promise<void>;

    testRevert_ProposalExists(overrides?: CallOverrides): Promise<void>;

    testRevert_ProposerAboveThreshold(overrides?: CallOverrides): Promise<void>;

    testRevert_VotingNotStarted(overrides?: CallOverrides): Promise<void>;

    test_CancelProposal(overrides?: CallOverrides): Promise<void>;

    test_CancelProposalAndTreasuryQueue(
      overrides?: CallOverrides
    ): Promise<void>;

    test_CancelProposerFellBelowThreshold(
      overrides?: CallOverrides
    ): Promise<void>;

    test_CastVote(overrides?: CallOverrides): Promise<void>;

    test_CastVoteWithSig(overrides?: CallOverrides): Promise<void>;

    test_CastVoteWithoutWeight(overrides?: CallOverrides): Promise<void>;

    test_CreateProposal(overrides?: CallOverrides): Promise<void>;

    test_DelegateAndTransferVotes(overrides?: CallOverrides): Promise<void>;

    test_GovernorInit(overrides?: CallOverrides): Promise<void>;

    test_GracePeriod(
      _newGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ProposalHashUniqueToSender(overrides?: CallOverrides): Promise<void>;

    test_ProposalVoteQueueExecution(overrides?: CallOverrides): Promise<void>;

    test_QueueProposal(overrides?: CallOverrides): Promise<void>;

    test_TreasuryInit(overrides?: CallOverrides): Promise<void>;

    test_TreasuryReceive721SafeTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_TreasuryReceiveERC1155BatchTransfer(
      overrides?: CallOverrides
    ): Promise<void>;

    test_TreasuryReceiveERC1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_UpdateDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_VerifySubmittedProposalHash(overrides?: CallOverrides): Promise<void>;

    test_VetoProposal(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFail_GovernorCannotReceive1155BatchTransfer(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFail_GovernorCannotReceive1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFail_GovernorCannotReceive721SafeTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFail_MismatchingHashesFromIncorrectProposer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_BelowProposalThreshold(
      bps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CallerNotVetoer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotCancelAlreadyExecuted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotCancelIfExactThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotQueueDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotQueueFailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotQueueFailedQuorum(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotQueueMissingProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotQueueVotingStillActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotReinitializeGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotReinitializeTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotVetoExecuted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_CannotVoteTwice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_InvalidVoteExpired(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_InvalidVoteNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_InvalidVoteSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_InvalidVoteType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_NoCalldata(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_NoTarget(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_NoValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_ProposalExists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_ProposerAboveThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevert_VotingNotStarted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CancelProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CancelProposalAndTreasuryQueue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CancelProposerFellBelowThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CastVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CastVoteWithSig(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CastVoteWithoutWeight(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_CreateProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_DelegateAndTransferVotes(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_GovernorInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_GracePeriod(
      _newGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ProposalHashUniqueToSender(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ProposalVoteQueueExecution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_QueueProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_TreasuryInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_TreasuryReceive721SafeTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_TreasuryReceiveERC1155BatchTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_TreasuryReceiveERC1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_UpdateDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_VerifySubmittedProposalHash(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_VetoProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFail_GovernorCannotReceive1155BatchTransfer(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFail_GovernorCannotReceive1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFail_GovernorCannotReceive721SafeTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFail_MismatchingHashesFromIncorrectProposer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_BelowProposalThreshold(
      bps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CallerNotVetoer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotCancelAlreadyExecuted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotCancelIfExactThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotQueueDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotQueueFailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotQueueFailedQuorum(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotQueueMissingProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotQueueVotingStillActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotReinitializeGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotReinitializeTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotVetoExecuted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_CannotVoteTwice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_InvalidVoteExpired(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_InvalidVoteNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_InvalidVoteSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_InvalidVoteType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_NoCalldata(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_NoTarget(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_NoValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_ProposalExists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_ProposerAboveThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevert_VotingNotStarted(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CancelProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CancelProposalAndTreasuryQueue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CancelProposerFellBelowThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CastVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CastVoteWithSig(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CastVoteWithoutWeight(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_CreateProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_DelegateAndTransferVotes(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_GovernorInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_GracePeriod(
      _newGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ProposalHashUniqueToSender(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ProposalVoteQueueExecution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_QueueProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_TreasuryInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_TreasuryReceive721SafeTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_TreasuryReceiveERC1155BatchTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_TreasuryReceiveERC1155SingleTransfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_UpdateDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_VerifySubmittedProposalHash(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_VetoProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
